package AnalisisReporte;
import Data.Data;
import java_cup.runtime.Symbol;

//PARSER 
parser code
{://Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        String a= s.value.toString();
        String b= s.value.toString();
        int cc = (s.left+1);
        int dd= (s.right+1);
        String c= String.valueOf(cc);
        String d= String.valueOf(dd);
        Data datos = new Data();
        datos.errores(a,"Error Sintactico: se esperaba: "+b,c,d,"a");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        String a= s.value.toString();
        String b= s.value.toString();
        int cc = (s.left+1);
        int dd= (s.right+1);
        String c= String.valueOf(cc);
        String d= String.valueOf(dd);
        Data datos = new Data();
        datos.errores(a,"Error Sintactico: se esperaba: "+b,c,d,"a");
    }

:}

action code
{://Codigo de usuario
    Data datos = new Data();
    int inicio_clase=0;
    int final_clase=0;
    String nombre ="";
    String tmp="";
:}


terminal String ID,ENTERO,DECIMAL,CADENA,CADENA_SIMP,COMENTARIO_LINEA,COMENTARIO_MULINEA;
terminal PAR_IZQ, PAR_DER, LLAV_IZQ, LLAV_DER, COMA, PTCOMA,IGUAL,DOSPT,CLASE,LET,VAR,ENTER,
CONST,IGUALACION, DIFERENCIA, MENOR_Q, MAYOR_Q,CONSOLA,
MENOR_IGUAL, MAYOR_IGUAL,AND, OR, NOT, MAS, MENOS, POR, DIVISION, POTENCIA, MODULO,IF,ELSE,FOR,DO,WHILE,SWITCH, CASE, BREAK,DEFAULT,REQUIRE;


nonterminal  INICIO, SENTENCIAS, 
    CLAS,                   // no terminal reconocer clase
    MET_PARM,               // no terminal reconocer metodos con parametros
    PAR,                    // Para identificar un parametro
    P_AUX,                  // Auxiliar para identificar un parametro
    MET,                    // no terminal reconocer metodos sin parametros
    VARIABLE,               // no terminal para identificar declaracion de variables
    TIPO_VAR,               // identifica el tipo de variable
    SEN_IF,                 //  no termianl para la sentencia if
    CONDICION,              //  no terminal para verificar el estado de variables dentro de la sentencia if
    CONDICION1,             //  no terminal auxilir para verificar el estado de variables dentro de la sentencia if
    VAR1,                   // Variable auxiliar para las condiciones
    VAR2,                    // Variable 2 auxiliar para las condiciones
    OP,                      // operacion a realizarse en las sentencias if
    SEN_FOR,                 // no terminal para sentencia for
    COND_FOR,                // no terminal para la condicion de la sentencia for
    VAR_FOR,                 // declaracion de una variable para las condiciones for
    VAR_FOR2,                // declaracion de una variable auxiliar
    AUMENTO,                 // declaracion de i++; en ciclo for
    OP_FOR,                  // declaracion de una operacion auxiliar para la variable for
    ARITMETICO,              // devuelve un signo de una operacion aritmetica
    VARIABLE_FOR,
    SEN_DO,                  // no terminal para la sentencia do
    SEN_WHILE,               // no terminal para la sentencia while
    COND_WHILE,              // no terminal para las condiciones while
    SEN_SWITCH,              // no terminal para las sentencias switch
    SEN_CASE,                // no terminal para la sentencia case
    
    EXP_CASE,                // expresion auxiliar sentencia switch case
    LLAM_MET,               // no terminal para llamar metodos 
    IMPORTS,                 //no terminal para las expresiones de importar
    SEN_CONSOLA,             // no terminal para imprimir en consola
    IMPRIMIR

    ;


//agregamos la precedencia

//precedence left MAS, MENOS;
//precedence left POR, DIV; 

// se inicia al analisis sintactico con inicio
start with INICIO;

INICIO ::=  INICIO ENTER
            |INICIO COMENTARIO_LINEA:c {: String a=c.toString();datos.comentarios(a);:}
            |INICIO COMENTARIO_MULINEA:c {: String a=c.toString();datos.comentarios(a);:}
            |INICIO CLAS 
                {:
                    System.out.println(tmp);
                    tmp="";
                :}
            |CLAS 
                {:
                    System.out.println(tmp);
                    tmp="";
                :}
            |ENTER
            |COMENTARIO_LINEA:c {: String a=c.toString();datos.comentarios(a);:}
            |COMENTARIO_MULINEA:c {: String a=c.toString();datos.comentarios(a);:}
            
;

SENTENCIAS ::=
     SENTENCIAS MET_PARM
    |SENTENCIAS MET
    |SENTENCIAS ENTER
    |SENTENCIAS VARIABLE
    |SENTENCIAS SEN_IF
    |SENTENCIAS SEN_FOR
    |SENTENCIAS SEN_DO
    |SENTENCIAS SEN_WHILE
    |SENTENCIAS SEN_SWITCH
    |SENTENCIAS LLAM_MET
    |SENTENCIAS IMPORTS
    |SENTENCIAS SEN_CONSOLA
    |SENTENCIAS COMENTARIO_LINEA:c {: String a=c.toString();datos.comentarios(a);:}
    |SENTENCIAS COMENTARIO_MULINEA:c {: String a=c.toString();datos.comentarios(a);:}
    |VARIABLE
    |MET_PARM
    |MET
    |SEN_IF
    |SEN_FOR
    |SEN_DO
    |SEN_WHILE
    |SEN_SWITCH
    |LLAM_MET
    |IMPORTS
    |SEN_CONSOLA
    |ENTER
    |COMENTARIO_LINEA:c {: String a=c.toString();datos.comentarios(a);:}
    |COMENTARIO_MULINEA:c {: String a=c.toString();datos.comentarios(a);:}
    

;

// =================== Declaracion de las transiciones de la clase ====================
CLAS ::= CLASE:idc
    {:inicio_clase=idcleft;:} 
    ID:id
    {:
        System.out.println("-> NOMBRE CLASE: "+id);
         nombre = id.toString();
        datos.Nombre_clases(nombre);
    :}
    LLAV_IZQ 
    SENTENCIAS
    LLAV_DER:idl
    {:final_clase=idlleft;
     datos.cantidad_lineas(inicio_clase,final_clase);
    :} 
    |error LLAV_IZQ 
    | error LLAV_DER
  ; 

// ================ Declaracion de las transiciones metodos con parametros ================

MET_PARM ::= ID:id PAR_IZQ PAR:p PAR_DER LLAV_IZQ
    {:
        System.out.println("-> METODO: "+id +" -> PARAMETROS: "+p);
        String aux= id.toString();
        datos.metodos_clase(aux); // se utiliza para enviar metodos de cada clase solo con id
    :}
    SENTENCIAS
    LLAV_DER:end
    {:
        String pa = p.toString();
     datos.metodos_clase2(nombre,id,pa,idleft,endleft); // se utiliza para metodo repetido
    :}
    |error LLAV_DER
    |error LLAV_IZQ
    ; 
PAR ::= PAR:a  COMA
        
        P_AUX:b
        {:
            RESULT = a+","+b;
         :} 
        |P_AUX:a ARITMETICO:b P_AUX:c
            {:
               RESULT = a +""+b+""+c;
            :}
        |P_AUX:a
            {:
            RESULT = a;
            :}
        ;

P_AUX ::= ID:id
            {:
                RESULT=id;
            :} 
        |CADENA:a
            {:
            RESULT=a;
            :} 
        |CADENA_SIMP:a
            {:
            RESULT=a;
            :} 
        |ENTERO:a
            {:
            RESULT=a;
            :} 
        |DECIMAL:a
            {:
            RESULT=a;
            :} 
        |ARITMETICO:a
            {:
            RESULT=a;
            :} 
    ;


// ================ Declaracion de las transiciones metodos sin parametros ================
MET ::= ID:id PAR_IZQ PAR_DER LLAV_IZQ
    {:
        System.out.println("-> METODO: "+id +" -> SIN PARAMETROS");
        String aux= id.toString();
        datos.metodos_clase(aux); // se utiliza para enviar metodos de cada clase solo con id
        
    :}
    SENTENCIAS
    LLAV_DER:end
    {:
    datos.metodos_clase2(nombre,id,"f",idleft,endleft); // se utiliza para metodo repetido 
    :}
    
    ;  



// ================ Declaracion de las transiciones  identificar variables ================

VARIABLE ::= TIPO_VAR:tipo ID:id IGUAL PAR:v
        {:
        System.out.println("Varibale: "+id+" tipo: "+tipo +" con valor: "+v);
            String aux= id.toString();
            datos.variables_clase(aux);
        :}
        |TIPO_VAR:tipo ID:id IGUAL PAR:v PTCOMA
        {:
        System.out.println("Varibale: "+id+" tipo: "+tipo +" con valor: "+v);
             String aux= id.toString();
            datos.variables_clase(aux);
        :}

        | TIPO_VAR ID:id PTCOMA
        {: System.out.println("Varibale: "+id);
            String aux= id.toString();
            datos.variables_clase(aux);
        :}
        | TIPO_VAR ID:id 
        {:System.out.println("Varibale: "+id);
            String aux= id.toString();
            datos.variables_clase(aux);
        :}
        | ID:id IGUAL PAR:v
        {:System.out.println("Varibale: "+id +"valor "+v);
            String aux= id.toString();
            datos.variables_clase(aux);
        :}
        | ID:id IGUAL PAR:v PTCOMA
        {:System.out.println("Varibale: "+id +"valor "+v);
            String aux= id.toString();
            datos.variables_clase(aux);
        :}
        |error PTCOMA
        |error ENTER
     
        ; 

TIPO_VAR ::= VAR:va
            {:
                    RESULT=va;
            :}
        |LET:le
            {:
                    RESULT=le;
            :}
        |CONST:cs
            {:
                    RESULT=cs;
            :}
        ;




// ================ Transiciones sentencia If ================

SEN_IF ::= IF PAR_IZQ CONDICION:a PAR_DER 
        {:
           System.out.println("sentencia if condicion: "+a );
        :}
        LLAV_IZQ 
                SENTENCIAS
                // cuerpo de la sentencia if
        LLAV_DER
        | ELSE LLAV_IZQ 
                SENTENCIAS
                // cuerpo de la sentencia if
               {:System.out.println("if con else" );:}
        LLAV_DER
        | ELSE  IF PAR_IZQ CONDICION:a PAR_DER 
        {:
           System.out.println("sentencia if condicion: "+a );
        :}
        LLAV_IZQ 
                SENTENCIAS
                // cuerpo de la sentencia if
        LLAV_DER
        | error PAR_IZQ

        | error PAR_DER
        ;

CONDICION ::= CONDICION:a OP:b CONDICION1:c
            {:
                RESULT= a+" " +b+" "+c  ;
            :}
            |CONDICION1:a
                {:
                    RESULT= a ;
                :}
            ;

CONDICION1 ::= 
          VAR1:var1 OP:ope VAR2:var2
            {:
                RESULT= var1+" "+ope+" "+var2 ;
            :}
        ;

VAR1 ::= ENTERO:ret 
            {:
                RESULT=ret;
            :}
        | CADENA:ret 
            {:
                RESULT=ret;
            :}
        
        | CADENA_SIMP:ret 
            {:
                RESULT=ret;
            :}
        | ID:ret 
            {:
                RESULT=ret;
            :}
        ;

VAR2 ::= ENTERO:ret 
            {:
                RESULT=ret;
            :}
        | CADENA:ret 
            {:
                RESULT=ret;
            :}
        
        | CADENA_SIMP:ret 
            {:
                RESULT=ret;
            :}
        | ID:ret 
            {:
                RESULT=ret;
            :}
        ;

OP  ::= IGUALACION:op 
            {:
                RESULT=op;
            :}
        | DIFERENCIA:op 
            {:
                RESULT=op;
            :}
        | MAYOR_Q:op 
            {:
                RESULT=op;
            :}
        | MENOR_Q:op 
            {:
                RESULT=op;
            :}
        | MENOR_IGUAL:op 
            {:
                RESULT=op;
            :}
        | MAYOR_IGUAL:op 
            {:
                RESULT=op;
            :}
        | AND:op 
            {:
                RESULT=op;
            :}
        | OR:op 
            {:
                RESULT=op;
            :}
        | NOT:op 
        ;

// ================ Transiciones sentencia For ================

SEN_FOR ::= FOR PAR_IZQ
            COND_FOR:c
                {:
                System.out.println("Ciclo for con condiciones: "+c );
                :}
            PAR_DER LLAV_IZQ
            SENTENCIAS
            // cuerpo del ciclo for
            LLAV_DER    
           
          
            ;

COND_FOR ::= VAR_FOR:a PTCOMA CONDICION1:b PTCOMA AUMENTO:c
            {:
                RESULT = a +"; "+b+";"+c;
                 
            :}  
            | VAR_FOR:a PTCOMA CONDICION1:b PTCOMA VARIABLE:c
            {:
                RESULT = a +"; "+b+";"+c;
                 
            :}  
            ;



VAR_FOR ::= VARIABLE_FOR:a
            {:
                RESULT = a ;
            :}  
            |VAR_FOR2:a
            {:
                RESULT = a ;
            :} 
        ; 
VAR_FOR2 ::= VAR1:a IGUAL OP_FOR:c
            {:
                RESULT = a +"="+c ;
                String aux= a.toString(); /// se envia como variable repetido
                datos.variables_clase(aux);
            :} 
        ;
OP_FOR ::=  OP_FOR:a ARITMETICO:b ENTERO:c
            {:
                RESULT = a +""+b+""+c ;
            :} 
            |OP_FOR:a ARITMETICO:b ID:c
            {:
                RESULT = a +""+b+""+c ;
            :} 
            |OP_FOR:a ENTERO:b 
            {:
                RESULT = a +""+b ;
            :} 
            |OP_FOR:a ID:b 
            {:
                RESULT = a +""+b ;
            :} 
            |ENTERO:a
            {:
                RESULT = a;
            :} 
            |ID:a
            {:
                RESULT = a;
            :} 
            |ARITMETICO:a
            {:
                RESULT = a;
            :} 
            ;


VARIABLE_FOR ::= TIPO_VAR:tipo ID:id IGUAL OP_FOR:value
        {:RESULT =  tipo +""+id+"="+value;
                String aux= id.toString(); /// se envia como variable repetido
                datos.variables_clase(aux);

        :}
        ; 



AUMENTO ::= AUMENTO:a ARITMETICO:b
            {:
                    RESULT=a+""+b;
            :}
            |AUMENTO:a ARITMETICO:b ENTERO:c
            {:
                    RESULT=a+""+b+""+c;
            :}
            |ID:a
            {:
                    RESULT=a;
            :}
            |ENTERO:a
            {:
                    RESULT=a;
            :}
            |ARITMETICO:a
            {:
                    RESULT=a;
            :}
            ;


// ================ Transiciones sentencia DO ================
SEN_DO ::= DO LLAV_IZQ 
            //cuerpo do while
            SENTENCIAS
           LLAV_DER
          WHILE PAR_IZQ COND_WHILE:c 
        {: System.out.println("sentencia do while : "+c ); :}
        PAR_DER PTCOMA
       
        ;
// ================ Transiciones sentencia while ================
SEN_WHILE ::= WHILE PAR_IZQ COND_WHILE:a 
            {: 
              System.out.println("sentencia while : "+a ); 
              RESULT = a;
            :}
            PAR_DER 
            LLAV_IZQ
           // cuerpo ciclo while 
            SENTENCIAS 
            LLAV_DER
          
            
            ;
COND_WHILE ::= CONDICION:a
            {:
                    RESULT=a;
            :}
            | NOT PAR_IZQ CONDICION:a PAR_DER
            {:
                    RESULT= "!(" +a+")";
            :}
            ;

// ================ Transiciones sentencia SWITCH CASE ================
SEN_SWITCH ::=SWITCH PAR_IZQ ID:id PAR_DER LLAV_IZQ
            {:
                System.out.println("switch case parametro : "+id );     
            :}
            SEN_CASE:a
                
                {:
                System.out.println("casos : "+a );     
                :}
                 
            DEFAULT
                SENTENCIAS
                //agregar la accion para el default
            LLAV_DER
           
            |error DEFAULT
            ;



SEN_CASE ::= SEN_CASE CASE EXP_CASE:exp DOSPT 
            {:RESULT = exp;:}
             {:
                System.out.println("casos : "+exp );     
             :}
             SENTENCIAS
            //agregar la accion a realizar
            BREAK PTCOMA
            | CASE EXP_CASE:exp DOSPT 
            {:RESULT = exp;:}
             {:
                System.out.println("casos : "+exp );     
             :}
             SENTENCIAS
            //agregar la accion a realizar
            BREAK PTCOMA
            
            ;
EXP_CASE ::= CADENA:a
            {:RESULT = a;:}
            |CADENA_SIMP:a
            {:RESULT = a;:}
            |ENTERO:a
             {:RESULT = a;:}
            ;
// ================ Transiciones LLAMADA DE METODOS ================
LLAM_MET ::= ID:a PAR_IZQ  PAR_DER PTCOMA
            {:
                System.out.println("nombre del parametro : "+ a +" Con Parametros:"+ tmp );     
             :}
            |ID:a PAR_IZQ PAR:b PAR_DER PTCOMA
            {:
                System.out.println("nombre del parametro : "+ a +" Con Parametros:"+ b );     
            :}
            |error PAR_DER PTCOMA
            ;
// ================ Transiciones LLAMADA DE IMPORTS ================

IMPORTS ::= TIPO_VAR:a ID:b IGUAL REQUIRE PAR_IZQ CADENA:c PAR_DER
            {:
                System.out.println("Importar : "+ a +" "+ b +"path:"+c );     
            :}
            
            ;



//=============================== Transiciones para operaciones aritmeticas ==============================
ARITMETICO ::= 
            MAS:a
            {:
                RESULT = a ;
            :} 
            |MENOS:a
            {:
                RESULT = a ;
            :} 
            |POR:a
            {:
                RESULT = a ;
            :} 
            |DIVISION:a
            {:
                RESULT = a ;
            :} 
            |POTENCIA:a
            {:
                RESULT = a ;
            :} 
            |MODULO:a
            {:
                RESULT = a ;
            :} 
            ;
//=============================== Transiciones para imprimir en pantalla ==============================
// se utiliza el no terminal valor para detectar que argumentos entran
// entre par_izq y par derecha va op concat :a IMPRIMIR:a
SEN_CONSOLA ::= CONSOLA PAR_IZQ  IMPRIMIR:a  PAR_DER PTCOMA

             {:
               System.out.println( "IMPRIMIR: "+a);
            :}
           
            ;

IMPRIMIR::= IMPRIMIR:a ARITMETICO P_AUX:b
            {:
                RESULT = a +""+b ;
            :} 
        |P_AUX:a
            {:
                RESULT = a ;
            :} 
        ;