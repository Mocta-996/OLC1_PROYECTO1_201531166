
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package Analisis;

import Data.Data;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\077\000\002\002\004\000\002\002\006\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\011\000\002\005\003\000\002\005\003\000\002\006" +
    "\006\000\002\007\010\000\002\007\007\000\002\011\003" +
    "\000\002\011\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\021\006\000\002\022\005\000\002\022\005\000\002\022" +
    "\004\000\002\022\004\000\002\022\003\000\002\022\003" +
    "\000\002\012\006\000\002\013\004\000\002\013\004\000" +
    "\002\013\004\000\002\013\004\000\002\013\004\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\014" +
    "\006\000\002\014\006\000\002\015\006\000\002\016\006" +
    "\000\002\017\006\000\002\017\006\000\002\020\006\000" +
    "\002\020\006\000\002\023\006\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\004\000\002\024" +
    "\004\000\002\024\004\000\002\025\006\000\002\026\004" +
    "\000\002\026\003\000\002\026\007\000\002\026\007\000" +
    "\002\026\006\000\002\026\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\011\004\001\002\000\004\032\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\014\012\021\013\015\017\014\025\013\027\011\001" +
    "\002\000\016\012\021\013\015\017\014\025\013\027\011" +
    "\033\174\001\002\000\004\032\152\001\002\000\016\012" +
    "\ufff9\013\ufff9\017\ufff9\025\ufff9\027\ufff9\033\ufff9\001\002" +
    "\000\004\032\141\001\002\000\004\032\074\001\002\000" +
    "\004\030\064\001\002\000\016\012\ufff6\013\ufff6\017\ufff6" +
    "\025\ufff6\027\ufff6\033\ufff6\001\002\000\016\012\ufffa\013" +
    "\ufffa\017\ufffa\025\ufffa\027\ufffa\033\ufffa\001\002\000\016" +
    "\012\ufff7\013\ufff7\017\ufff7\025\ufff7\027\ufff7\033\ufff7\001" +
    "\002\000\004\032\023\001\002\000\016\012\ufff8\013\ufff8" +
    "\017\ufff8\025\ufff8\027\ufff8\033\ufff8\001\002\000\006\014" +
    "\025\015\026\001\002\000\004\004\060\001\002\000\004" +
    "\004\uffef\001\002\000\004\004\uffee\001\002\000\010\014" +
    "\025\015\026\033\031\001\002\000\004\004\032\001\002" +
    "\000\016\012\ufff2\013\ufff2\017\ufff2\025\ufff2\027\ufff2\033" +
    "\ufff2\001\002\000\004\037\033\001\002\000\014\005\040" +
    "\006\036\007\037\010\041\040\035\001\002\000\004\035" +
    "\057\001\002\000\004\032\043\001\002\000\004\035\uffec" +
    "\001\002\000\004\035\uffeb\001\002\000\004\035\uffed\001" +
    "\002\000\004\035\uffea\001\002\000\004\035\uffe9\001\002" +
    "\000\012\004\045\007\050\034\044\035\047\001\002\000" +
    "\004\007\056\001\002\000\006\033\uffe2\034\uffe2\001\002" +
    "\000\006\033\053\034\052\001\002\000\004\004\051\001" +
    "\002\000\006\033\uffe3\034\uffe3\001\002\000\006\033\uffe4" +
    "\034\uffe4\001\002\000\006\004\054\007\055\001\002\000" +
    "\004\035\uffe8\001\002\000\006\033\uffe7\034\uffe7\001\002" +
    "\000\006\033\uffe6\034\uffe6\001\002\000\006\033\uffe5\034" +
    "\uffe5\001\002\000\010\014\ufff1\015\ufff1\033\ufff1\001\002" +
    "\000\004\037\061\001\002\000\014\005\040\006\036\007" +
    "\037\010\041\040\035\001\002\000\004\035\063\001\002" +
    "\000\010\014\ufff0\015\ufff0\033\ufff0\001\002\000\006\007" +
    "\067\010\066\001\002\000\004\034\070\001\002\000\006" +
    "\031\ufff3\034\ufff3\001\002\000\006\031\ufff4\034\ufff4\001" +
    "\002\000\006\007\067\010\066\001\002\000\004\031\072" +
    "\001\002\000\004\035\073\001\002\000\016\012\ufff5\013" +
    "\ufff5\017\ufff5\025\ufff5\027\ufff5\033\ufff5\001\002\000\010" +
    "\016\076\020\103\022\100\001\002\000\016\016\uffdb\020" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\033\uffdb\001\002\000\004" +
    "\036\134\001\002\000\016\016\uffd9\020\uffd9\022\uffd9\023" +
    "\uffd9\024\uffd9\033\uffd9\001\002\000\004\036\131\001\002" +
    "\000\016\016\076\020\103\022\100\023\115\024\114\033" +
    "\111\001\002\000\016\016\uffda\020\uffda\022\uffda\023\uffda" +
    "\024\uffda\033\uffda\001\002\000\004\036\104\001\002\000" +
    "\004\021\105\001\002\000\004\035\106\001\002\000\016" +
    "\016\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6\033\uffd6\001" +
    "\002\000\016\016\uffdd\020\uffdd\022\uffdd\023\uffdd\024\uffdd" +
    "\033\uffdd\001\002\000\016\016\uffdf\020\uffdf\022\uffdf\023" +
    "\uffdf\024\uffdf\033\uffdf\001\002\000\016\012\uffe1\013\uffe1" +
    "\017\uffe1\025\uffe1\027\uffe1\033\uffe1\001\002\000\016\016" +
    "\uffde\020\uffde\022\uffde\023\uffde\024\uffde\033\uffde\001\002" +
    "\000\016\016\uffe0\020\uffe0\022\uffe0\023\uffe0\024\uffe0\033" +
    "\uffe0\001\002\000\004\036\124\001\002\000\004\036\117" +
    "\001\002\000\016\016\uffdc\020\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\033\uffdc\001\002\000\006\004\120\007\121\001\002" +
    "\000\004\035\123\001\002\000\004\035\122\001\002\000" +
    "\016\016\uffd3\020\uffd3\022\uffd3\023\uffd3\024\uffd3\033\uffd3" +
    "\001\002\000\016\016\uffd4\020\uffd4\022\uffd4\023\uffd4\024" +
    "\uffd4\033\uffd4\001\002\000\006\004\125\007\126\001\002" +
    "\000\004\035\130\001\002\000\004\035\127\001\002\000" +
    "\016\016\uffd1\020\uffd1\022\uffd1\023\uffd1\024\uffd1\033\uffd1" +
    "\001\002\000\016\016\uffd2\020\uffd2\022\uffd2\023\uffd2\024" +
    "\uffd2\033\uffd2\001\002\000\004\021\132\001\002\000\004" +
    "\035\133\001\002\000\016\016\uffd5\020\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\033\uffd5\001\002\000\006\004\135\007\136" +
    "\001\002\000\004\035\140\001\002\000\004\035\137\001" +
    "\002\000\020\016\uffd7\020\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\026\uffd7\033\uffd7\001\002\000\020\016\uffd8\020\uffd8\022" +
    "\uffd8\023\uffd8\024\uffd8\026\uffd8\033\uffd8\001\002\000\010" +
    "\016\076\020\103\022\100\001\002\000\012\016\uffcf\020" +
    "\uffcf\022\uffcf\033\uffcf\001\002\000\012\016\uffce\020\uffce" +
    "\022\uffce\033\uffce\001\002\000\012\016\076\020\103\022" +
    "\100\033\150\001\002\000\012\016\uffcd\020\uffcd\022\uffcd" +
    "\033\uffcd\001\002\000\012\016\uffca\020\uffca\022\uffca\033" +
    "\uffca\001\002\000\012\016\uffcc\020\uffcc\022\uffcc\033\uffcc" +
    "\001\002\000\016\012\uffd0\013\uffd0\017\uffd0\025\uffd0\027" +
    "\uffd0\033\uffd0\001\002\000\012\016\uffcb\020\uffcb\022\uffcb" +
    "\033\uffcb\001\002\000\006\016\076\026\153\001\002\000" +
    "\004\036\166\001\002\000\010\016\076\026\156\033\160" +
    "\001\002\000\010\016\uffc7\026\uffc7\033\uffc7\001\002\000" +
    "\004\036\161\001\002\000\010\016\uffc8\026\uffc8\033\uffc8" +
    "\001\002\000\016\012\uffc9\013\uffc9\017\uffc9\025\uffc9\027" +
    "\uffc9\033\uffc9\001\002\000\006\004\162\007\163\001\002" +
    "\000\004\035\165\001\002\000\004\035\164\001\002\000" +
    "\010\016\uffc5\026\uffc5\033\uffc5\001\002\000\010\016\uffc6" +
    "\026\uffc6\033\uffc6\001\002\000\006\004\167\007\170\001" +
    "\002\000\004\035\172\001\002\000\004\035\171\001\002" +
    "\000\010\016\uffc3\026\uffc3\033\uffc3\001\002\000\010\016" +
    "\uffc4\026\uffc4\033\uffc4\001\002\000\016\012\ufffe\013\ufffe" +
    "\017\ufffe\025\ufffe\027\ufffe\033\ufffe\001\002\000\004\002" +
    "\000\001\002\000\016\012\ufffb\013\ufffb\017\ufffb\025\ufffb" +
    "\027\ufffb\033\ufffb\001\002\000\016\012\uffff\013\uffff\017" +
    "\uffff\025\uffff\027\uffff\033\uffff\001\002\000\016\012\ufffc" +
    "\013\ufffc\017\ufffc\025\ufffc\027\ufffc\033\ufffc\001\002\000" +
    "\016\012\ufffd\013\ufffd\017\ufffd\025\ufffd\027\ufffd\033\ufffd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\176\000\004\002\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\007\004\016" +
    "\006\011\012\021\023\017\025\015\001\001\000\014\004" +
    "\175\006\172\012\177\023\176\025\174\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\026\011\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\027\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\033\021\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\061\021\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\064\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\013\100\014\074\015\101\016\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\014\112\015\107\016\111\017\106" +
    "\020\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\142\015\144\016\141\024\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\014\146\015\150\016\145" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\154" +
    "\026\153\001\001\000\002\001\001\000\004\014\156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    // constructor a la clase data
    Data datos = new Data();
    // 

    String tmp="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= GENERAR_REPORTE LLAV_IZQ INSTRUCCION LLAV_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INSTRUCCION ::= INSTRUCCION CARGAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCCION ::= INSTRUCCION DEFIN_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCCION ::= INSTRUCCION GRAF_BARRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= INSTRUCCION GRAF_PIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= INSTRUCCION GRAF_LINEAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= CARGAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DEFIN_VAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= GRAF_BARRAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= GRAF_PIE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= GRAF_LINEAS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CARGAR ::= COMPARE PAR_IZQ PATH COMA PATH PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		//System.out.println("Se cargaran los siguientes archivos: " +a +","+b);
                String auxa= a.toString();
             	String auxb= b.toString();
            	datos.Almacenar_Path("Archivo1",auxa);
                datos.Almacenar_Path("Archivo2",auxb);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CARGAR",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // PATH ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PATH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PATH ::= CADENA_SIMP 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PATH",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DEFIN_VAR ::= DEFINIR_GLOBALES LLAV_IZQ VARIABLES LLAV_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("DEFIN_VAR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VARIABLES ::= VARIABLES TIPO_V ID IGUAL VALOR PTCOMA 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= d +", "+a +", " +b;
                String auxa= a.toString();
             	String auxb= b.toString();
            	datos.Almacenar_varglobales(auxa,auxb);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VARIABLES ::= TIPO_V ID IGUAL VALOR PTCOMA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=a +" ," +b;
                String auxa= a.toString();
             	String auxb= b.toString();
            	datos.Almacenar_varglobales(auxa,auxb);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLES",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO_V ::= STRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_V",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TIPO_V ::= DOUBLE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_V",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VALOR ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALOR ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALOR ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALOR ::= CADENA_SIMP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // VALOR ::= CAD_DOLLAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALOR",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CAD_DOLLAR ::= DOLLAR LLAV_IZQ CONT LLAV_DER 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= b;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CAD_DOLLAR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CONT ::= CONT COMA ID 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b+";"+a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CONT ::= CONT COMA CADENA 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT=b+ ";"+a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CONT ::= COMA CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CONT ::= PTCOMA ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONT ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONT ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONT",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // GRAF_BARRAS ::= GRAFICA_BARRAS LLAV_IZQ INS_GBARRAS LLAV_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAF_BARRAS",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INS_GBARRAS ::= INS_GBARRAS TIT_GBARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("TITULO:"+ a);
                String auxa= a.toString();
            	datos.Almacenar_gbarras("titulo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INS_GBARRAS ::= INS_GBARRAS VAL_EJEX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores eje x:"+ a);
             	String auxa= a.toString();
            	datos.Almacenar_gbarras("ejex",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INS_GBARRAS ::= INS_GBARRAS VAL_VALORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores Ingresados:"+ a);
                String auxa= a.toString();
            	datos.Almacenar_gbarras("valores",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // INS_GBARRAS ::= INS_GBARRAS TIT_X 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Titulo del eje x:"+ a);
                String auxa= a.toString();
            	datos.Almacenar_gbarras("titulox",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // INS_GBARRAS ::= INS_GBARRAS TIT_Y 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Titulo del eje y:"+ a);
                String auxa= a.toString();
            	datos.Almacenar_gbarras("tituloy",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // INS_GBARRAS ::= TIT_GBARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("TITULO:"+ a);
                String auxa= a.toString();
            	datos.Almacenar_gbarras("titulo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // INS_GBARRAS ::= VAL_EJEX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores eje x:"+ a);
             	String auxa= a.toString();
            	datos.Almacenar_gbarras("ejex",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INS_GBARRAS ::= VAL_VALORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores Ingresados:"+ a);
                String auxa= a.toString();
            	datos.Almacenar_gbarras("valores",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GBARRAS",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIT_GBARRAS ::= TITULO DOSPT ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIT_GBARRAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIT_GBARRAS ::= TITULO DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIT_GBARRAS",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VAL_EJEX ::= EJEX DOSPT VALOR_EJEX PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL_EJEX",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VAL_VALORES ::= VALORES DOSPT VALOR_EJEX PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAL_VALORES",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIT_X ::= TITULOX DOSPT ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIT_X",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIT_X ::= TITULOX DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIT_X",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIT_Y ::= TITULOY DOSPT ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIT_Y",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TIT_Y ::= TITULOY DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT= a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIT_Y",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // GRAF_PIE ::= GRAFICA_PIE LLAV_IZQ INS_GPIE LLAV_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAF_PIE",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // INS_GPIE ::= VAL_VALORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores ingresados:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_gpie("valores",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GPIE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // INS_GPIE ::= TIT_GBARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("TITULO:"+ a); 
                    String auxa= a.toString();
                    datos.Almacenar_gpie("titulo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GPIE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INS_GPIE ::= VAL_EJEX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores eje x:"+ a); 
                    String auxa= a.toString();
                    datos.Almacenar_gpie("ejex",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GPIE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INS_GPIE ::= INS_GPIE TIT_GBARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("TITULO:"+ a); 
                    String auxa= a.toString();
                    datos.Almacenar_gpie("titulo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GPIE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // INS_GPIE ::= INS_GPIE VAL_EJEX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores eje x:"+ a); 
                    String auxa= a.toString();
                    datos.Almacenar_gpie("ejex",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GPIE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // INS_GPIE ::= INS_GPIE VAL_VALORES 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("Valores ingresados:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_gpie("valores",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_GPIE",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // GRAF_LINEAS ::= GRAFICA_LINE LLAV_IZQ INS_LINEAS LLAV_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("GRAF_LINEAS",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INS_LINEAS ::= INS_LINEAS TIT_GBARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("TITULO:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_glinea("titulo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_LINEAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // INS_LINEAS ::= TIT_GBARRAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		//System.out.println("TITULO:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_glinea("titulo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_LINEAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INS_LINEAS ::= INS_LINEAS ARCHIVO DOSPT ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("Archivo:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_glinea("archivo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_LINEAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // INS_LINEAS ::= INS_LINEAS ARCHIVO DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("Archivo:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_glinea("archivo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_LINEAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // INS_LINEAS ::= ARCHIVO DOSPT ID PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("Archivo:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_glinea("archivo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_LINEAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // INS_LINEAS ::= ARCHIVO DOSPT CADENA PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		//System.out.println("Archivo:"+ a);
                    String auxa= a.toString();
                    datos.Almacenar_glinea("archivo",auxa);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INS_LINEAS",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
