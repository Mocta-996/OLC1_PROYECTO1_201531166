
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package AnalisisReporte;

import Data.Data;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\004\000\002\002\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\004\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\043\002\000\002" +
    "\044\002\000\002\004\011\000\002\004\004\000\002\004" +
    "\004\000\002\045\002\000\002\005\012\000\002\005\004" +
    "\000\002\005\004\000\002\006\005\000\002\006\005\000" +
    "\002\006\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\046\002\000\002\010\011\000\002\011\006" +
    "\000\002\011\007\000\002\011\005\000\002\011\004\000" +
    "\002\011\005\000\002\011\006\000\002\011\004\000\002" +
    "\011\004\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\047\002\000\002\013\012\000\002\050\002" +
    "\000\002\013\007\000\002\051\002\000\002\013\013\000" +
    "\002\013\004\000\002\013\004\000\002\014\005\000\002" +
    "\014\003\000\002\015\005\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\052\002" +
    "\000\002\021\012\000\002\022\007\000\002\022\007\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\026\005\000\002\026\005\000\002\026\004\000\002\026" +
    "\004\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\030\006\000\002\025\004\000\002\025\005\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\053\002\000\002\031\014\000\002\054\002\000\002\032" +
    "\012\000\002\033\003\000\002\033\006\000\002\055\002" +
    "\000\002\056\002\000\002\034\015\000\002\034\004\000" +
    "\002\057\002\000\002\035\012\000\002\060\002\000\002" +
    "\035\011\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\006\000\002\037\007\000\002\037\005" +
    "\000\002\040\011\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\041\007\000\002\042\005\000\002\042" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\014\003\005\011\006\012\007\023\012\026" +
    "\010\001\002\000\016\002\ufffc\003\ufffc\011\ufffc\012\ufffc" +
    "\023\ufffc\026\ufffc\001\002\000\006\015\373\016\372\001" +
    "\002\000\016\002\ufffa\003\ufffa\011\ufffa\012\ufffa\023\ufffa" +
    "\026\ufffa\001\002\000\016\002\ufff9\003\ufff9\011\ufff9\012" +
    "\ufff9\023\ufff9\026\ufff9\001\002\000\016\002\ufffb\003\ufffb" +
    "\011\ufffb\012\ufffb\023\ufffb\026\ufffb\001\002\000\016\002" +
    "\370\003\005\011\366\012\367\023\012\026\371\001\002" +
    "\000\004\004\uffdc\001\002\000\004\004\014\001\002\000" +
    "\004\015\uffdb\001\002\000\004\015\016\001\002\000\040" +
    "\003\041\004\034\011\023\012\043\024\042\025\052\026" +
    "\035\027\040\034\036\050\033\051\020\052\047\053\037" +
    "\054\024\055\031\001\002\000\044\003\uffe6\004\uffe6\011" +
    "\uffe6\012\uffe6\016\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\034\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055" +
    "\uffe6\057\uffe6\001\002\000\006\015\351\050\352\001\002" +
    "\000\044\003\uffe4\004\uffe4\011\uffe4\012\uffe4\016\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\027\uffe4\034\uffe4\050\uffe4\051\uffe4" +
    "\052\uffe4\053\uffe4\054\uffe4\055\uffe4\057\uffe4\001\002\000" +
    "\044\003\uffe7\004\uffe7\011\uffe7\012\uffe7\016\uffe7\024\uffe7" +
    "\025\uffe7\026\uffe7\027\uffe7\034\uffe7\050\uffe7\051\uffe7\052" +
    "\uffe7\053\uffe7\054\uffe7\055\uffe7\057\uffe7\001\002\000\044" +
    "\003\uffde\004\uffde\011\uffde\012\uffde\016\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\034\uffde\050\uffde\051\uffde\052\uffde" +
    "\053\uffde\054\uffde\055\uffde\057\uffde\001\002\000\004\013" +
    "\342\001\002\000\044\003\uffe5\004\uffe5\011\uffe5\012\uffe5" +
    "\016\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\034\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\055\uffe5\057\uffe5" +
    "\001\002\000\044\003\uffe3\004\uffe3\011\uffe3\012\uffe3\016" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\034\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\053\uffe3\054\uffe3\055\uffe3\057\uffe3\001" +
    "\002\000\044\003\uffe8\004\uffe8\011\uffe8\012\uffe8\016\uffe8" +
    "\024\uffe8\025\uffe8\026\uffe8\027\uffe8\034\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\057\uffe8\001\002" +
    "\000\042\003\041\004\034\011\177\012\206\016\341\024" +
    "\042\025\052\026\204\027\040\034\036\050\033\051\020" +
    "\052\047\053\037\054\024\055\031\001\002\000\004\013" +
    "\306\001\002\000\044\003\uffea\004\uffea\011\uffea\012\uffea" +
    "\016\uffea\024\uffea\025\uffea\026\uffea\027\uffea\034\uffea\050" +
    "\uffea\051\uffea\052\uffea\053\uffea\054\uffea\055\uffea\057\uffea" +
    "\001\002\000\004\013\277\001\002\000\006\013\261\021" +
    "\144\001\002\000\044\003\uffdf\004\uffdf\011\uffdf\012\uffdf" +
    "\016\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\034\uffdf\050" +
    "\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf\057\uffdf" +
    "\001\002\000\004\013\252\001\002\000\004\015\231\001" +
    "\002\000\004\004\uffbe\001\002\000\020\013\227\014\226" +
    "\015\225\016\224\020\142\026\143\060\223\001\002\000" +
    "\004\004\uffbf\001\002\000\044\003\uffdd\004\uffdd\011\uffdd" +
    "\012\uffdd\016\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\034" +
    "\uffdd\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd" +
    "\057\uffdd\001\002\000\004\004\215\001\002\000\044\003" +
    "\uffe0\004\uffe0\011\uffe0\012\uffe0\016\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\034\uffe0\050\uffe0\051\uffe0\052\uffe0\053" +
    "\uffe0\054\uffe0\055\uffe0\057\uffe0\001\002\000\044\003\uffe2" +
    "\004\uffe2\011\uffe2\012\uffe2\016\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\034\uffe2\050\uffe2\051\uffe2\052\uffe2\053\uffe2" +
    "\054\uffe2\055\uffe2\057\uffe2\001\002\000\004\013\053\001" +
    "\002\000\044\003\uffe1\004\uffe1\011\uffe1\012\uffe1\016\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\034\uffe1\050\uffe1\051" +
    "\uffe1\052\uffe1\053\uffe1\054\uffe1\055\uffe1\057\uffe1\001\002" +
    "\000\044\003\uffe9\004\uffe9\011\uffe9\012\uffe9\016\uffe9\024" +
    "\uffe9\025\uffe9\026\uffe9\027\uffe9\034\uffe9\050\uffe9\051\uffe9" +
    "\052\uffe9\053\uffe9\054\uffe9\055\uffe9\057\uffe9\001\002\000" +
    "\004\004\uffc0\001\002\000\020\004\061\005\060\007\054" +
    "\010\065\024\042\025\052\027\040\001\002\000\026\021" +
    "\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\035\uffb1\036\uffb1" +
    "\037\uffb1\040\uffb1\041\uffb1\001\002\000\004\021\213\001" +
    "\002\000\004\020\uff9d\001\002\000\004\014\uffa1\001\002" +
    "\000\026\021\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2\035" +
    "\uffb2\036\uffb2\037\uffb2\040\uffb2\041\uffb2\001\002\000\026" +
    "\021\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf\035\uffaf\036" +
    "\uffaf\037\uffaf\040\uffaf\041\uffaf\001\002\000\004\020\uff9c" +
    "\001\002\000\004\020\107\001\002\000\004\004\066\001" +
    "\002\000\026\021\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0" +
    "\035\uffb0\036\uffb0\037\uffb0\040\uffb0\041\uffb0\001\002\000" +
    "\004\021\067\001\002\000\022\004\076\005\072\042\074" +
    "\043\070\044\073\045\100\046\071\047\077\001\002\000" +
    "\076\003\uff77\004\uff77\005\uff77\006\uff77\007\uff77\010\uff77" +
    "\011\uff77\012\uff77\014\uff77\016\uff77\017\uff77\020\uff77\024" +
    "\uff77\025\uff77\026\uff77\027\uff77\034\uff77\042\uff77\043\uff77" +
    "\044\uff77\045\uff77\046\uff77\047\uff77\050\uff77\051\uff77\052" +
    "\uff77\053\uff77\054\uff77\055\uff77\057\uff77\001\002\000\076" +
    "\003\uff74\004\uff74\005\uff74\006\uff74\007\uff74\010\uff74\011" +
    "\uff74\012\uff74\014\uff74\016\uff74\017\uff74\020\uff74\024\uff74" +
    "\025\uff74\026\uff74\027\uff74\034\uff74\042\uff74\043\uff74\044" +
    "\uff74\045\uff74\046\uff74\047\uff74\050\uff74\051\uff74\052\uff74" +
    "\053\uff74\054\uff74\055\uff74\057\uff74\001\002\000\024\004" +
    "\uff96\005\uff96\020\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\047\uff96\001\002\000\076\003\uff76\004\uff76\005" +
    "\uff76\006\uff76\007\uff76\010\uff76\011\uff76\012\uff76\014\uff76" +
    "\016\uff76\017\uff76\020\uff76\024\uff76\025\uff76\026\uff76\027" +
    "\uff76\034\uff76\042\uff76\043\uff76\044\uff76\045\uff76\046\uff76" +
    "\047\uff76\050\uff76\051\uff76\052\uff76\053\uff76\054\uff76\055" +
    "\uff76\057\uff76\001\002\000\076\003\uff78\004\uff78\005\uff78" +
    "\006\uff78\007\uff78\010\uff78\011\uff78\012\uff78\014\uff78\016" +
    "\uff78\017\uff78\020\uff78\024\uff78\025\uff78\026\uff78\027\uff78" +
    "\034\uff78\042\uff78\043\uff78\044\uff78\045\uff78\046\uff78\047" +
    "\uff78\050\uff78\051\uff78\052\uff78\053\uff78\054\uff78\055\uff78" +
    "\057\uff78\001\002\000\024\004\uff94\005\uff94\020\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\001\002" +
    "\000\024\004\uff95\005\uff95\020\uff95\042\uff95\043\uff95\044" +
    "\uff95\045\uff95\046\uff95\047\uff95\001\002\000\076\003\uff73" +
    "\004\uff73\005\uff73\006\uff73\007\uff73\010\uff73\011\uff73\012" +
    "\uff73\014\uff73\016\uff73\017\uff73\020\uff73\024\uff73\025\uff73" +
    "\026\uff73\027\uff73\034\uff73\042\uff73\043\uff73\044\uff73\045" +
    "\uff73\046\uff73\047\uff73\050\uff73\051\uff73\052\uff73\053\uff73" +
    "\054\uff73\055\uff73\057\uff73\001\002\000\076\003\uff75\004" +
    "\uff75\005\uff75\006\uff75\007\uff75\010\uff75\011\uff75\012\uff75" +
    "\014\uff75\016\uff75\017\uff75\020\uff75\024\uff75\025\uff75\026" +
    "\uff75\027\uff75\034\uff75\042\uff75\043\uff75\044\uff75\045\uff75" +
    "\046\uff75\047\uff75\050\uff75\051\uff75\052\uff75\053\uff75\054" +
    "\uff75\055\uff75\057\uff75\001\002\000\024\004\104\005\102" +
    "\020\uff93\042\074\043\070\044\073\045\100\046\071\047" +
    "\077\001\002\000\024\004\uff98\005\uff98\020\uff98\042\uff98" +
    "\043\uff98\044\uff98\045\uff98\046\uff98\047\uff98\001\002\000" +
    "\006\004\105\005\106\001\002\000\024\004\uff97\005\uff97" +
    "\020\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046\uff97\047" +
    "\uff97\001\002\000\024\004\uff99\005\uff99\020\uff99\042\uff99" +
    "\043\uff99\044\uff99\045\uff99\046\uff99\047\uff99\001\002\000" +
    "\024\004\uff9a\005\uff9a\020\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\047\uff9a\001\002\000\012\004\061\005" +
    "\060\007\054\010\065\001\002\000\024\030\160\031\154" +
    "\032\156\033\155\035\162\036\153\037\151\040\161\041" +
    "\157\001\002\000\004\020\112\001\002\000\032\003\120" +
    "\004\117\005\114\024\042\025\052\027\040\042\074\043" +
    "\070\044\073\045\100\046\071\047\077\001\002\000\020" +
    "\014\uff9f\042\074\043\070\044\073\045\100\046\071\047" +
    "\077\001\002\000\020\014\uff8f\042\uff8f\043\uff8f\044\uff8f" +
    "\045\uff8f\046\uff8f\047\uff8f\001\002\000\004\014\uff9e\001" +
    "\002\000\020\014\uff8e\042\uff8e\043\uff8e\044\uff8e\045\uff8e" +
    "\046\uff8e\047\uff8e\001\002\000\022\014\uff90\021\144\042" +
    "\uff90\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\001\002" +
    "\000\006\020\142\026\143\001\002\000\004\004\122\001" +
    "\002\000\010\014\uffc5\020\124\021\123\001\002\000\030" +
    "\004\132\005\130\006\126\007\125\010\133\042\074\043" +
    "\070\044\073\045\100\046\071\047\077\001\002\000\046" +
    "\003\uffc6\004\uffc6\011\uffc6\012\uffc6\014\uffc6\016\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\034\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\053\uffc6\054\uffc6\055\uffc6\057\uffc6\001\002\000" +
    "\066\003\uffcf\004\uffcf\011\uffcf\012\uffcf\014\uffcf\016\uffcf" +
    "\017\uffcf\020\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\034" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\050\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\057" +
    "\uffcf\001\002\000\066\003\uffcc\004\uffcc\011\uffcc\012\uffcc" +
    "\014\uffcc\016\uffcc\017\uffcc\020\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\034\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\057\uffcc\001\002\000\052\003\uffc8\004\uffc8" +
    "\011\uffc8\012\uffc8\014\uffc8\016\uffc8\017\137\020\140\024" +
    "\uffc8\025\uffc8\026\uffc8\027\uffc8\034\uffc8\050\uffc8\051\uffc8" +
    "\052\uffc8\053\uffc8\054\uffc8\055\uffc8\057\uffc8\001\002\000" +
    "\066\003\uffcd\004\uffcd\011\uffcd\012\uffcd\014\uffcd\016\uffcd" +
    "\017\uffcd\020\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd\034" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd" +
    "\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd\055\uffcd\057" +
    "\uffcd\001\002\000\066\003\uffcb\004\uffcb\011\uffcb\012\uffcb" +
    "\014\uffcb\016\uffcb\017\uffcb\020\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\027\uffcb\034\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb" +
    "\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb\054" +
    "\uffcb\055\uffcb\057\uffcb\001\002\000\066\003\uffd0\004\uffd0" +
    "\011\uffd0\012\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\034\uffd0\042\uffd0\043\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\057\uffd0\001\002\000\066" +
    "\003\uffce\004\uffce\011\uffce\012\uffce\014\uffce\016\uffce\017" +
    "\uffce\020\uffce\024\uffce\025\uffce\026\uffce\027\uffce\034\uffce" +
    "\042\uffce\043\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050" +
    "\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\057\uffce" +
    "\001\002\000\066\003\uffd1\004\uffd1\011\uffd1\012\uffd1\014" +
    "\uffd1\016\uffd1\017\uffd1\020\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\034\uffd1\042\074\043\070\044\073\045\100\046" +
    "\071\047\077\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1" +
    "\055\uffd1\057\uffd1\001\002\000\030\004\132\005\130\006" +
    "\126\007\125\010\133\042\074\043\070\044\073\045\100" +
    "\046\071\047\077\001\002\000\052\003\uffd2\004\uffd2\011" +
    "\uffd2\012\uffd2\014\uffd2\016\uffd2\017\uffd2\020\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\034\uffd2\050\uffd2\051\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\057\uffd2\001\002\000\030" +
    "\004\132\005\130\006\126\007\125\010\133\042\074\043" +
    "\070\044\073\045\100\046\071\047\077\001\002\000\046" +
    "\003\uffc7\004\uffc7\011\uffc7\012\uffc7\014\uffc7\016\uffc7\024" +
    "\uffc7\025\uffc7\026\uffc7\027\uffc7\034\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\053\uffc7\054\uffc7\055\uffc7\057\uffc7\001\002\000" +
    "\052\003\uffd3\004\uffd3\011\uffd3\012\uffd3\014\uffd3\016\uffd3" +
    "\017\uffd3\020\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\034" +
    "\uffd3\050\uffd3\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3" +
    "\057\uffd3\001\002\000\046\003\uffc2\004\uffc2\011\uffc2\012" +
    "\uffc2\014\uffc2\016\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\034\uffc2\050\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\055" +
    "\uffc2\057\uffc2\001\002\000\046\003\uffc1\004\uffc1\011\uffc1" +
    "\012\uffc1\014\uffc1\016\uffc1\024\uffc1\025\uffc1\026\uffc1\027" +
    "\uffc1\034\uffc1\050\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1" +
    "\055\uffc1\057\uffc1\001\002\000\030\004\132\005\130\006" +
    "\126\007\125\010\133\042\074\043\070\044\073\045\100" +
    "\046\071\047\077\001\002\000\052\003\uffc4\004\uffc4\011" +
    "\uffc4\012\uffc4\014\uffc4\016\uffc4\017\137\020\146\024\uffc4" +
    "\025\uffc4\026\uffc4\027\uffc4\034\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\053\uffc4\054\uffc4\055\uffc4\057\uffc4\001\002\000\046" +
    "\003\uffc3\004\uffc3\011\uffc3\012\uffc3\014\uffc3\016\uffc3\024" +
    "\uffc3\025\uffc3\026\uffc3\027\uffc3\034\uffc3\050\uffc3\051\uffc3" +
    "\052\uffc3\053\uffc3\054\uffc3\055\uffc3\057\uffc3\001\002\000" +
    "\022\005\150\014\uff92\042\uff92\043\uff92\044\uff92\045\uff92" +
    "\046\uff92\047\uff92\001\002\000\020\014\uff91\042\uff91\043" +
    "\uff91\044\uff91\045\uff91\046\uff91\047\uff91\001\002\000\012" +
    "\004\uffa4\005\uffa4\007\uffa4\010\uffa4\001\002\000\012\004" +
    "\163\005\165\007\166\010\167\001\002\000\012\004\uffa5" +
    "\005\uffa5\007\uffa5\010\uffa5\001\002\000\012\004\uffa9\005" +
    "\uffa9\007\uffa9\010\uffa9\001\002\000\012\004\uffa8\005\uffa8" +
    "\007\uffa8\010\uffa8\001\002\000\012\004\uffa7\005\uffa7\007" +
    "\uffa7\010\uffa7\001\002\000\012\004\uffa2\005\uffa2\007\uffa2" +
    "\010\uffa2\001\002\000\012\004\uffaa\005\uffaa\007\uffaa\010" +
    "\uffaa\001\002\000\012\004\uffa3\005\uffa3\007\uffa3\010\uffa3" +
    "\001\002\000\012\004\uffa6\005\uffa6\007\uffa6\010\uffa6\001" +
    "\002\000\030\014\uffab\020\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\035\uffab\036\uffab\037\uffab\040\uffab\041\uffab\001" +
    "\002\000\030\014\uffb3\020\uffb3\030\uffb3\031\uffb3\032\uffb3" +
    "\033\uffb3\035\uffb3\036\uffb3\037\uffb3\040\uffb3\041\uffb3\001" +
    "\002\000\030\014\uffae\020\uffae\030\uffae\031\uffae\032\uffae" +
    "\033\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\001" +
    "\002\000\030\014\uffad\020\uffad\030\uffad\031\uffad\032\uffad" +
    "\033\uffad\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\001" +
    "\002\000\030\014\uffac\020\uffac\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\001" +
    "\002\000\004\014\171\001\002\000\004\015\172\001\002" +
    "\000\040\003\041\004\034\011\023\012\043\024\042\025" +
    "\052\026\035\027\040\034\036\050\033\051\020\052\047" +
    "\053\037\054\024\055\031\001\002\000\042\003\041\004" +
    "\034\011\177\012\206\016\205\024\042\025\052\026\204" +
    "\027\040\034\036\050\033\051\020\052\047\053\037\054" +
    "\024\055\031\001\002\000\044\003\ufff3\004\ufff3\011\ufff3" +
    "\012\ufff3\016\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\034" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\053\ufff3\054\ufff3\055\ufff3" +
    "\057\ufff3\001\002\000\044\003\ufff1\004\ufff1\011\ufff1\012" +
    "\ufff1\016\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\034\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\053\ufff1\054\ufff1\055\ufff1\057" +
    "\ufff1\001\002\000\044\003\ufff4\004\ufff4\011\ufff4\012\ufff4" +
    "\016\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4\034\ufff4\050" +
    "\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\055\ufff4\057\ufff4" +
    "\001\002\000\044\003\uffec\004\uffec\011\uffec\012\uffec\016" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\034\uffec\050\uffec" +
    "\051\uffec\052\uffec\053\uffec\054\uffec\055\uffec\057\uffec\001" +
    "\002\000\044\003\ufff2\004\ufff2\011\ufff2\012\ufff2\016\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\034\ufff2\050\ufff2\051" +
    "\ufff2\052\ufff2\053\ufff2\054\ufff2\055\ufff2\057\ufff2\001\002" +
    "\000\044\003\ufff0\004\ufff0\011\ufff0\012\ufff0\016\ufff0\024" +
    "\ufff0\025\ufff0\026\ufff0\027\ufff0\034\ufff0\050\ufff0\051\ufff0" +
    "\052\ufff0\053\ufff0\054\ufff0\055\ufff0\057\ufff0\001\002\000" +
    "\044\003\ufff7\004\ufff7\011\ufff7\012\ufff7\016\ufff7\024\ufff7" +
    "\025\ufff7\026\ufff7\027\ufff7\034\ufff7\050\ufff7\051\ufff7\052" +
    "\ufff7\053\ufff7\054\ufff7\055\ufff7\057\ufff7\001\002\000\044" +
    "\003\ufff5\004\ufff5\011\ufff5\012\ufff5\016\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\034\ufff5\050\ufff5\051\ufff5\052\ufff5" +
    "\053\ufff5\054\ufff5\055\ufff5\057\ufff5\001\002\000\044\003" +
    "\ufff6\004\ufff6\011\ufff6\012\ufff6\016\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\027\ufff6\034\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\057\ufff6\001\002\000\044\003\uffa0" +
    "\004\uffa0\011\uffa0\012\uffa0\016\uffa0\024\uffa0\025\uffa0\026" +
    "\uffa0\027\uffa0\034\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0" +
    "\054\uffa0\055\uffa0\057\uffa0\001\002\000\044\003\uffeb\004" +
    "\uffeb\011\uffeb\012\uffeb\016\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\034\uffeb\050\uffeb\051\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\057\uffeb\001\002\000\044\003\uffed\004\uffed" +
    "\011\uffed\012\uffed\016\uffed\024\uffed\025\uffed\026\uffed\027" +
    "\uffed\034\uffed\050\uffed\051\uffed\052\uffed\053\uffed\054\uffed" +
    "\055\uffed\057\uffed\001\002\000\044\003\uffef\004\uffef\011" +
    "\uffef\012\uffef\016\uffef\024\uffef\025\uffef\026\uffef\027\uffef" +
    "\034\uffef\050\uffef\051\uffef\052\uffef\053\uffef\054\uffef\055" +
    "\uffef\057\uffef\001\002\000\044\003\uffee\004\uffee\011\uffee" +
    "\012\uffee\016\uffee\024\uffee\025\uffee\026\uffee\027\uffee\034" +
    "\uffee\050\uffee\051\uffee\052\uffee\053\uffee\054\uffee\055\uffee" +
    "\057\uffee\001\002\000\044\003\ufff8\004\ufff8\011\ufff8\012" +
    "\ufff8\016\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\034\ufff8" +
    "\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\057" +
    "\ufff8\001\002\000\022\004\076\005\072\042\074\043\070" +
    "\044\073\045\100\046\071\047\077\001\002\000\024\004" +
    "\104\005\102\020\uff9b\042\074\043\070\044\073\045\100" +
    "\046\071\047\077\001\002\000\050\003\uffc5\004\uffc5\011" +
    "\uffc5\012\uffc5\016\uffc5\020\124\021\216\024\uffc5\025\uffc5" +
    "\026\uffc5\027\uffc5\034\uffc5\050\uffc5\051\uffc5\052\uffc5\053" +
    "\uffc5\054\uffc5\055\uffc5\057\uffc5\001\002\000\032\004\132" +
    "\005\130\006\126\007\125\010\133\042\074\043\070\044" +
    "\073\045\100\046\071\047\077\061\217\001\002\000\004" +
    "\013\220\001\002\000\004\007\221\001\002\000\004\014" +
    "\222\001\002\000\044\003\uff79\004\uff79\011\uff79\012\uff79" +
    "\016\uff79\024\uff79\025\uff79\026\uff79\027\uff79\034\uff79\050" +
    "\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79\057\uff79" +
    "\001\002\000\044\003\uff84\004\uff84\011\uff84\012\uff84\016" +
    "\uff84\024\uff84\025\uff84\026\uff84\027\uff84\034\uff84\050\uff84" +
    "\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\057\uff84\001" +
    "\002\000\044\003\uffd5\004\uffd5\011\uffd5\012\uffd5\016\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\034\uffd5\050\uffd5\051" +
    "\uffd5\052\uffd5\053\uffd5\054\uffd5\055\uffd5\057\uffd5\001\002" +
    "\000\044\003\uffd4\004\uffd4\011\uffd4\012\uffd4\016\uffd4\024" +
    "\uffd4\025\uffd4\026\uffd4\027\uffd4\034\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\057\uffd4\001\002\000" +
    "\046\003\uffb6\004\uffb6\011\uffb6\012\uffb6\016\uffb6\020\230" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\034\uffb6\050\uffb6\051" +
    "\uffb6\052\uffb6\053\uffb6\054\uffb6\055\uffb6\057\uffb6\001\002" +
    "\000\044\003\uffb7\004\uffb7\011\uffb7\012\uffb7\016\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\034\uffb7\050\uffb7\051\uffb7" +
    "\052\uffb7\053\uffb7\054\uffb7\055\uffb7\057\uffb7\001\002\000" +
    "\044\003\uff7a\004\uff7a\011\uff7a\012\uff7a\016\uff7a\024\uff7a" +
    "\025\uff7a\026\uff7a\027\uff7a\034\uff7a\050\uff7a\051\uff7a\052" +
    "\uff7a\053\uff7a\054\uff7a\055\uff7a\057\uff7a\001\002\000\040" +
    "\003\041\004\034\011\023\012\043\024\042\025\052\026" +
    "\035\027\040\034\036\050\033\051\020\052\047\053\037" +
    "\054\024\055\031\001\002\000\042\003\041\004\034\011" +
    "\177\012\206\016\233\024\042\025\052\026\204\027\040" +
    "\034\036\050\033\051\020\052\047\053\037\054\024\055" +
    "\031\001\002\000\004\054\234\001\002\000\004\013\235" +
    "\001\002\000\014\004\061\005\060\007\054\010\065\041" +
    "\236\001\002\000\004\013\247\001\002\000\026\014\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\001\002\000\004\014\uff8d\001\002" +
    "\000\026\014\uff89\030\160\031\154\032\156\033\155\035" +
    "\162\036\153\037\151\040\161\041\157\001\002\000\012" +
    "\004\061\005\060\007\054\010\065\001\002\000\026\014" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\035\uffb5\036\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\001\002\000\004\014\245\001" +
    "\002\000\004\020\246\001\002\000\044\003\uff8c\004\uff8c" +
    "\011\uff8c\012\uff8c\016\uff8c\024\uff8c\025\uff8c\026\uff8c\027" +
    "\uff8c\034\uff8c\050\uff8c\051\uff8c\052\uff8c\053\uff8c\054\uff8c" +
    "\055\uff8c\057\uff8c\001\002\000\012\004\061\005\060\007" +
    "\054\010\065\001\002\000\026\014\251\030\160\031\154" +
    "\032\156\033\155\035\162\036\153\037\151\040\161\041" +
    "\157\001\002\000\004\014\uff88\001\002\000\030\004\132" +
    "\005\130\006\126\007\125\010\133\042\074\043\070\044" +
    "\073\045\100\046\071\047\077\001\002\000\020\014\256" +
    "\042\074\043\070\044\073\045\100\046\071\047\077\001" +
    "\002\000\020\014\uff70\042\uff70\043\uff70\044\uff70\045\uff70" +
    "\046\uff70\047\uff70\001\002\000\030\004\132\005\130\006" +
    "\126\007\125\010\133\042\074\043\070\044\073\045\100" +
    "\046\071\047\077\001\002\000\004\020\257\001\002\000" +
    "\044\003\uff72\004\uff72\011\uff72\012\uff72\016\uff72\024\uff72" +
    "\025\uff72\026\uff72\027\uff72\034\uff72\050\uff72\051\uff72\052" +
    "\uff72\053\uff72\054\uff72\055\uff72\057\uff72\001\002\000\020" +
    "\014\uff71\042\uff71\043\uff71\044\uff71\045\uff71\046\uff71\047" +
    "\uff71\001\002\000\032\004\132\005\130\006\126\007\125" +
    "\010\133\014\263\042\074\043\070\044\073\045\100\046" +
    "\071\047\077\001\002\000\006\014\271\017\137\001\002" +
    "\000\006\015\264\020\265\001\002\000\040\003\uffca\004" +
    "\uffca\011\uffca\012\uffca\024\uffca\025\uffca\026\uffca\027\uffca" +
    "\034\uffca\050\uffca\051\uffca\052\uffca\053\uffca\054\uffca\055" +
    "\uffca\001\002\000\044\003\uff7c\004\uff7c\011\uff7c\012\uff7c" +
    "\016\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c\034\uff7c\050" +
    "\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\057\uff7c" +
    "\001\002\000\040\003\041\004\034\011\023\012\043\024" +
    "\042\025\052\026\035\027\040\034\036\050\033\051\020" +
    "\052\047\053\037\054\024\055\031\001\002\000\042\003" +
    "\041\004\034\011\177\012\206\016\270\024\042\025\052" +
    "\026\204\027\040\034\036\050\033\051\020\052\047\053" +
    "\037\054\024\055\031\001\002\000\044\003\uffc9\004\uffc9" +
    "\011\uffc9\012\uffc9\016\uffc9\024\uffc9\025\uffc9\026\uffc9\027" +
    "\uffc9\034\uffc9\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9" +
    "\055\uffc9\057\uffc9\001\002\000\006\015\272\020\273\001" +
    "\002\000\040\003\uffd7\004\uffd7\011\uffd7\012\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\034\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\001\002\000\044\003\uff7b" +
    "\004\uff7b\011\uff7b\012\uff7b\016\uff7b\024\uff7b\025\uff7b\026" +
    "\uff7b\027\uff7b\034\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\055\uff7b\057\uff7b\001\002\000\040\003\041\004" +
    "\034\011\023\012\043\024\042\025\052\026\035\027\040" +
    "\034\036\050\033\051\020\052\047\053\037\054\024\055" +
    "\031\001\002\000\042\003\041\004\034\011\177\012\206" +
    "\016\276\024\042\025\052\026\204\027\040\034\036\050" +
    "\033\051\020\052\047\053\037\054\024\055\031\001\002" +
    "\000\044\003\uffd6\004\uffd6\011\uffd6\012\uffd6\016\uffd6\024" +
    "\uffd6\025\uffd6\026\uffd6\027\uffd6\034\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\057\uffd6\001\002\000" +
    "\012\004\061\005\060\007\054\010\065\001\002\000\026" +
    "\014\301\030\160\031\154\032\156\033\155\035\162\036" +
    "\153\037\151\040\161\041\157\001\002\000\004\015\uffbd" +
    "\001\002\000\004\015\303\001\002\000\040\003\041\004" +
    "\034\011\023\012\043\024\042\025\052\026\035\027\040" +
    "\034\036\050\033\051\020\052\047\053\037\054\024\055" +
    "\031\001\002\000\042\003\041\004\034\011\177\012\206" +
    "\016\305\024\042\025\052\026\204\027\040\034\036\050" +
    "\033\051\020\052\047\053\037\054\024\055\031\001\002" +
    "\000\044\003\uffbc\004\uffbc\011\uffbc\012\uffbc\016\uffbc\024" +
    "\uffbc\025\uffbc\026\uffbc\027\uffbc\034\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\053\uffbc\054\uffbc\055\uffbc\057\uffbc\001\002\000" +
    "\004\004\307\001\002\000\004\014\310\001\002\000\004" +
    "\015\311\001\002\000\004\056\uff87\001\002\000\004\056" +
    "\314\001\002\000\006\056\326\060\uff86\001\002\000\010" +
    "\005\316\007\317\010\320\001\002\000\004\022\321\001" +
    "\002\000\004\022\uff7d\001\002\000\004\022\uff7f\001\002" +
    "\000\004\022\uff7e\001\002\000\040\003\uff81\004\uff81\011" +
    "\uff81\012\uff81\024\uff81\025\uff81\026\uff81\027\uff81\034\uff81" +
    "\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81\001" +
    "\002\000\040\003\041\004\034\011\023\012\043\024\042" +
    "\025\052\026\035\027\040\034\036\050\033\051\020\052" +
    "\047\053\037\054\024\055\031\001\002\000\042\003\041" +
    "\004\034\011\177\012\206\024\042\025\052\026\204\027" +
    "\040\034\036\050\033\051\020\052\047\053\037\054\024" +
    "\055\031\057\324\001\002\000\004\020\325\001\002\000" +
    "\006\056\uff80\060\uff80\001\002\000\010\005\316\007\317" +
    "\010\320\001\002\000\004\060\330\001\002\000\040\003" +
    "\041\004\034\011\023\012\043\024\042\025\052\026\035" +
    "\027\040\034\036\050\033\051\020\052\047\053\037\054" +
    "\024\055\031\001\002\000\042\003\041\004\034\011\177" +
    "\012\206\016\332\024\042\025\052\026\204\027\040\034" +
    "\036\050\033\051\020\052\047\053\037\054\024\055\031" +
    "\001\002\000\044\003\uff85\004\uff85\011\uff85\012\uff85\016" +
    "\uff85\024\uff85\025\uff85\026\uff85\027\uff85\034\uff85\050\uff85" +
    "\051\uff85\052\uff85\053\uff85\054\uff85\055\uff85\057\uff85\001" +
    "\002\000\004\022\334\001\002\000\040\003\uff83\004\uff83" +
    "\011\uff83\012\uff83\024\uff83\025\uff83\026\uff83\027\uff83\034" +
    "\uff83\050\uff83\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83" +
    "\001\002\000\040\003\041\004\034\011\023\012\043\024" +
    "\042\025\052\026\035\027\040\034\036\050\033\051\020" +
    "\052\047\053\037\054\024\055\031\001\002\000\042\003" +
    "\041\004\034\011\177\012\206\024\042\025\052\026\204" +
    "\027\040\034\036\050\033\051\020\052\047\053\037\054" +
    "\024\055\031\057\337\001\002\000\004\020\340\001\002" +
    "\000\006\056\uff82\060\uff82\001\002\000\016\002\uffda\003" +
    "\uffda\011\uffda\012\uffda\023\uffda\026\uffda\001\002\000\014" +
    "\004\061\005\060\007\054\010\065\041\236\001\002\000" +
    "\004\014\uff8b\001\002\000\004\014\345\001\002\000\004" +
    "\015\346\001\002\000\040\003\041\004\034\011\023\012" +
    "\043\024\042\025\052\026\035\027\040\034\036\050\033" +
    "\051\020\052\047\053\037\054\024\055\031\001\002\000" +
    "\042\003\041\004\034\011\177\012\206\016\350\024\042" +
    "\025\052\026\204\027\040\034\036\050\033\051\020\052" +
    "\047\053\037\054\024\055\031\001\002\000\044\003\uff8a" +
    "\004\uff8a\011\uff8a\012\uff8a\016\uff8a\024\uff8a\025\uff8a\026" +
    "\uff8a\027\uff8a\034\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a" +
    "\054\uff8a\055\uff8a\057\uff8a\001\002\000\040\003\041\004" +
    "\034\011\023\012\043\024\042\025\052\026\035\027\040" +
    "\034\036\050\033\051\020\052\047\053\037\054\024\055" +
    "\031\001\002\000\004\013\353\001\002\000\012\004\061" +
    "\005\060\007\054\010\065\001\002\000\026\014\355\030" +
    "\160\031\154\032\156\033\155\035\162\036\153\037\151" +
    "\040\161\041\157\001\002\000\004\015\uffb9\001\002\000" +
    "\004\015\357\001\002\000\040\003\041\004\034\011\023" +
    "\012\043\024\042\025\052\026\035\027\040\034\036\050" +
    "\033\051\020\052\047\053\037\054\024\055\031\001\002" +
    "\000\042\003\041\004\034\011\177\012\206\016\361\024" +
    "\042\025\052\026\204\027\040\034\036\050\033\051\020" +
    "\052\047\053\037\054\024\055\031\001\002\000\044\003" +
    "\uffb8\004\uffb8\011\uffb8\012\uffb8\016\uffb8\024\uffb8\025\uffb8" +
    "\026\uffb8\027\uffb8\034\uffb8\050\uffb8\051\uffb8\052\uffb8\053" +
    "\uffb8\054\uffb8\055\uffb8\057\uffb8\001\002\000\042\003\041" +
    "\004\034\011\177\012\206\016\uffbb\024\042\025\052\026" +
    "\204\027\040\034\036\050\033\051\020\052\047\053\037" +
    "\054\024\055\031\001\002\000\004\016\364\001\002\000" +
    "\044\003\uffba\004\uffba\011\uffba\012\uffba\016\uffba\024\uffba" +
    "\025\uffba\026\uffba\027\uffba\034\uffba\050\uffba\051\uffba\052" +
    "\uffba\053\uffba\054\uffba\055\uffba\057\uffba\001\002\000\016" +
    "\002\ufffd\003\ufffd\011\ufffd\012\ufffd\023\ufffd\026\ufffd\001" +
    "\002\000\016\002\uffff\003\uffff\011\uffff\012\uffff\023\uffff" +
    "\026\uffff\001\002\000\016\002\ufffe\003\ufffe\011\ufffe\012" +
    "\ufffe\023\ufffe\026\ufffe\001\002\000\004\002\001\001\002" +
    "\000\016\002\000\003\000\011\000\012\000\023\000\026" +
    "\000\001\002\000\016\002\uffd8\003\uffd8\011\uffd8\012\uffd8" +
    "\023\uffd8\026\uffd8\001\002\000\016\002\uffd9\003\uffd9\011" +
    "\uffd9\012\uffd9\023\uffd9\026\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\371\000\006\002\010\004\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\004\364\001\001\000\004\043" +
    "\012\001\001\000\002\001\001\000\004\044\014\001\001" +
    "\000\002\001\001\000\034\003\027\005\050\010\026\011" +
    "\031\012\043\013\021\021\016\031\024\032\020\034\025" +
    "\037\045\040\047\041\044\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\032\005\211\010\201\011\202" +
    "\012\043\013\175\021\173\031\177\032\174\034\200\037" +
    "\207\040\210\041\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\063\016\054\022\056\023\062\024\061" +
    "\030\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\052\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\100\027\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\027\102\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\110\016\107\001\001\000\004" +
    "\020\151\001\001\000\002\001\001\000\012\011\114\012" +
    "\120\025\112\027\115\001\001\000\004\027\146\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\126\007\133\027\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\027\134\001\001\000\006" +
    "\007\135\027\130\001\001\000\002\001\001\000\006\007" +
    "\140\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\144\007" +
    "\133\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\003\172\005\050\010\026\011\031\012\043\013" +
    "\021\021\016\031\024\032\020\034\025\037\045\040\047" +
    "\041\044\001\001\000\032\005\211\010\201\011\202\012" +
    "\043\013\175\021\173\031\177\032\174\034\200\037\207" +
    "\040\210\041\206\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\213\027\074\001\001\000\004\027\102" +
    "\001\001\000\002\001\001\000\010\006\126\007\133\027" +
    "\130\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\231\005\050\010\026\011" +
    "\031\012\043\013\021\021\016\031\024\032\020\034\025" +
    "\037\045\040\047\041\044\001\001\000\032\005\211\010" +
    "\201\011\202\012\043\013\175\021\173\031\177\032\174" +
    "\034\200\037\207\040\210\041\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\014\240\015\236\016\107" +
    "\033\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\053\243\001\001\000\004\020\241\001\001\000\006" +
    "\015\242\016\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\014\247" +
    "\015\236\016\107\001\001\000\004\020\241\001\001\000" +
    "\002\001\001\000\010\007\253\027\130\042\252\001\001" +
    "\000\004\027\254\001\001\000\002\001\001\000\006\007" +
    "\257\027\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\261\007\133\027\130\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\265" +
    "\001\001\000\002\001\001\000\034\003\266\005\050\010" +
    "\026\011\031\012\043\013\021\021\016\031\024\032\020" +
    "\034\025\037\045\040\047\041\044\001\001\000\032\005" +
    "\211\010\201\011\202\012\043\013\175\021\173\031\177" +
    "\032\174\034\200\037\207\040\210\041\206\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\273\001\001" +
    "\000\002\001\001\000\034\003\274\005\050\010\026\011" +
    "\031\012\043\013\021\021\016\031\024\032\020\034\025" +
    "\037\045\040\047\041\044\001\001\000\032\005\211\010" +
    "\201\011\202\012\043\013\175\021\173\031\177\032\174" +
    "\034\200\037\207\040\210\041\206\001\001\000\002\001" +
    "\001\000\010\014\277\015\236\016\107\001\001\000\004" +
    "\020\241\001\001\000\004\047\301\001\001\000\002\001" +
    "\001\000\034\003\303\005\050\010\026\011\031\012\043" +
    "\013\021\021\016\031\024\032\020\034\025\037\045\040" +
    "\047\041\044\001\001\000\032\005\211\010\201\011\202" +
    "\012\043\013\175\021\173\031\177\032\174\034\200\037" +
    "\207\040\210\041\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\055" +
    "\311\001\001\000\004\035\312\001\001\000\004\056\326" +
    "\001\001\000\004\036\314\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\321\001\001\000\034\003\322\005\050\010\026\011" +
    "\031\012\043\013\021\021\016\031\024\032\020\034\025" +
    "\037\045\040\047\041\044\001\001\000\032\005\211\010" +
    "\201\011\202\012\043\013\175\021\173\031\177\032\174" +
    "\034\200\037\207\040\210\041\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\036\332\001\001\000\002" +
    "\001\001\000\034\003\330\005\050\010\026\011\031\012" +
    "\043\013\021\021\016\031\024\032\020\034\025\037\045" +
    "\040\047\041\044\001\001\000\032\005\211\010\201\011" +
    "\202\012\043\013\175\021\173\031\177\032\174\034\200" +
    "\037\207\040\210\041\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\057\334\001\001\000\034\003\335" +
    "\005\050\010\026\011\031\012\043\013\021\021\016\031" +
    "\024\032\020\034\025\037\045\040\047\041\044\001\001" +
    "\000\032\005\211\010\201\011\202\012\043\013\175\021" +
    "\173\031\177\032\174\034\200\037\207\040\210\041\206" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\240\015\236\016\107\033\342\001\001" +
    "\000\004\054\343\001\001\000\002\001\001\000\002\001" +
    "\001\000\034\003\346\005\050\010\026\011\031\012\043" +
    "\013\021\021\016\031\024\032\020\034\025\037\045\040" +
    "\047\041\044\001\001\000\032\005\211\010\201\011\202" +
    "\012\043\013\175\021\173\031\177\032\174\034\200\037" +
    "\207\040\210\041\206\001\001\000\002\001\001\000\034" +
    "\003\361\005\050\010\026\011\031\012\043\013\021\021" +
    "\016\031\024\032\020\034\025\037\045\040\047\041\044" +
    "\001\001\000\002\001\001\000\010\014\353\015\236\016" +
    "\107\001\001\000\004\020\241\001\001\000\004\051\355" +
    "\001\001\000\002\001\001\000\034\003\357\005\050\010" +
    "\026\011\031\012\043\013\021\021\016\031\024\032\020" +
    "\034\025\037\045\040\047\041\044\001\001\000\032\005" +
    "\211\010\201\011\202\012\043\013\175\021\173\031\177" +
    "\032\174\034\200\037\207\040\210\041\206\001\001\000" +
    "\002\001\001\000\034\005\211\010\201\011\202\012\043" +
    "\013\175\021\173\031\177\032\174\034\200\037\207\040" +
    "\210\041\206\050\362\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


//Codigo visible
    
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        String a= s.value.toString();
        String b= s.value.toString();
        int cc = (s.left+1);
        int dd= (s.right+1);
        String c= String.valueOf(cc);
        String d= String.valueOf(dd);
        Data datos = new Data();
        datos.errores(a,"Error Sintactico: se esperaba: "+b,c,d,"a");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        String a= s.value.toString();
        String b= s.value.toString();
        int cc = (s.left+1);
        int dd= (s.right+1);
        String c= String.valueOf(cc);
        String d= String.valueOf(dd);
        Data datos = new Data();
        datos.errores(a,"Error Sintactico: se esperaba: "+b,c,d,"a");
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {

//Codigo de usuario
    Data datos = new Data();
    int inicio_clase=0;
    int final_clase=0;
    String nombre ="";
    String tmp="";

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INICIO ENTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO COMENTARIO_LINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INICIO COMENTARIO_MULINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= INICIO CLAS 
            {
              Object RESULT =null;
		
                    System.out.println(tmp);
                    tmp="";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CLAS 
            {
              Object RESULT =null;
		
                    System.out.println(tmp);
                    tmp="";
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= ENTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= COMENTARIO_LINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= COMENTARIO_MULINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIAS ::= SENTENCIAS MET_PARM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIAS ::= SENTENCIAS MET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIAS ::= SENTENCIAS ENTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIAS ::= SENTENCIAS VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIAS ::= SENTENCIAS SEN_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIAS ::= SENTENCIAS SEN_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIAS ::= SENTENCIAS SEN_DO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIAS ::= SENTENCIAS SEN_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIAS ::= SENTENCIAS SEN_SWITCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIAS ::= SENTENCIAS LLAM_MET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIAS ::= SENTENCIAS IMPORTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIAS ::= SENTENCIAS SEN_CONSOLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIAS ::= SENTENCIAS COMENTARIO_LINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIAS ::= SENTENCIAS COMENTARIO_MULINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIAS ::= VARIABLE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIAS ::= MET_PARM 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIAS ::= MET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIAS ::= SEN_IF 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIAS ::= SEN_FOR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIAS ::= SEN_DO 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIAS ::= SEN_WHILE 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIAS ::= SEN_SWITCH 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIAS ::= LLAM_MET 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIAS ::= IMPORTS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIAS ::= SEN_CONSOLA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIAS ::= ENTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIAS ::= COMENTARIO_LINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIAS ::= COMENTARIO_MULINEA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 String a=c.toString();datos.comentarios(nombre,a);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SENTENCIAS",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$0 ::= 
            {
              Object RESULT =null;
		int idcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idcright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
inicio_clase=idcleft;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object idc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

        System.out.println("-> NOMBRE CLASE: "+id);
         nombre = id.toString();
        //datos.Nombre_clases(nombre);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CLAS ::= CLASE NT$0 ID NT$1 LLAV_IZQ SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object idc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object idl = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		final_clase=idlleft;
    datos.Nombre_clases(nombre,inicio_clase,final_clase);
    datos.cantidad_lineas(inicio_clase,final_clase);
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CLAS ::= error LLAV_IZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CLAS ::= error LLAV_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CLAS",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

        System.out.println("-> METODO: "+id +" -> PARAMETROS: "+p);
        String aux= id.toString();
        datos.metodos_clase(aux); // se utiliza para enviar metodos de cada clase solo con id
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MET_PARM ::= ID PAR_IZQ PAR PAR_DER LLAV_IZQ NT$2 SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        String pa = p.toString();
     datos.metodos_clase2(nombre,id,pa,idleft,endleft); // se utiliza para metodo repetido
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET_PARM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MET_PARM ::= error LLAV_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET_PARM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MET_PARM ::= error LLAV_IZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET_PARM",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // PAR ::= PAR COMA P_AUX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a+","+b;
         
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // PAR ::= P_AUX ARITMETICO P_AUX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
               RESULT = a +""+b+""+c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PAR ::= P_AUX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PAR",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // P_AUX ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=id;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_AUX",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // P_AUX ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_AUX",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // P_AUX ::= CADENA_SIMP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_AUX",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // P_AUX ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_AUX",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // P_AUX ::= DECIMAL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_AUX",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // P_AUX ::= ARITMETICO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("P_AUX",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

        System.out.println("-> METODO: "+id +" -> SIN PARAMETROS");
        String aux= id.toString();
        datos.metodos_clase(aux); // se utiliza para enviar metodos de cada clase solo con id
        
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // MET ::= ID PAR_IZQ PAR_DER LLAV_IZQ NT$3 SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int endleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int endright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object end = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    datos.metodos_clase2(nombre,id,"f",idleft,endleft); // se utiliza para metodo repetido 
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MET",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // VARIABLE ::= TIPO_VAR ID IGUAL PAR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        System.out.println("Varibale: "+id+" tipo: "+tipo +" con valor: "+v);
            String aux= id.toString();
            datos.variables_clase(nombre,aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VARIABLE ::= TIPO_VAR ID IGUAL PAR PTCOMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
        System.out.println("Varibale: "+id+" tipo: "+tipo +" con valor: "+v);
             String aux= id.toString();
            datos.variables_clase(nombre,aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VARIABLE ::= TIPO_VAR ID PTCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 System.out.println("Varibale: "+id);
            String aux= id.toString();
            datos.variables_clase(nombre,aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VARIABLE ::= TIPO_VAR ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Varibale: "+id);
            String aux= id.toString();
            datos.variables_clase(nombre,aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VARIABLE ::= ID IGUAL PAR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		System.out.println("Varibale: "+id +"valor "+v);
            String aux= id.toString();
            datos.variables_clase(nombre,aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VARIABLE ::= ID IGUAL PAR PTCOMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("Varibale: "+id +"valor "+v);
            String aux= id.toString();
            datos.variables_clase(nombre,aux);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VARIABLE ::= error PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VARIABLE ::= error ENTER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // TIPO_VAR ::= VAR 
            {
              Object RESULT =null;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object va = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=va;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // TIPO_VAR ::= LET 
            {
              Object RESULT =null;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object le = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=le;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPO_VAR ::= CONST 
            {
              Object RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cs = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=cs;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPO_VAR",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NT$4 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

           System.out.println("sentencia if condicion: "+a );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SEN_IF ::= IF PAR_IZQ CONDICION PAR_DER NT$4 LLAV_IZQ SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_IF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$5 ::= 
            {
              Object RESULT =null;
System.out.println("if con else" );
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SEN_IF ::= ELSE LLAV_IZQ SENTENCIAS NT$5 LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_IF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$6 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

           System.out.println("sentencia if condicion: "+a );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SEN_IF ::= ELSE IF PAR_IZQ CONDICION PAR_DER NT$6 LLAV_IZQ SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_IF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SEN_IF ::= error PAR_IZQ 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_IF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SEN_IF ::= error PAR_DER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_IF",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // CONDICION ::= CONDICION OP CONDICION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= a+" " +b+" "+c  ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // CONDICION ::= CONDICION1 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT= a ;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // CONDICION1 ::= VAR1 OP VAR2 
            {
              Object RESULT =null;
		int var1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int var1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object var1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object ope = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int var2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int var2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object var2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT= var1+" "+ope+" "+var2 ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CONDICION1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VAR1 ::= ENTERO 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VAR1 ::= CADENA 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VAR1 ::= CADENA_SIMP 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VAR1 ::= ID 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VAR2 ::= ENTERO 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VAR2 ::= CADENA 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VAR2 ::= CADENA_SIMP 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VAR2 ::= ID 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int retright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ret = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=ret;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OP ::= IGUALACION 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OP ::= DIFERENCIA 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OP ::= MAYOR_Q 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OP ::= MENOR_Q 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OP ::= MENOR_IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OP ::= MAYOR_IGUAL 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OP ::= AND 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OP ::= OR 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT=op;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // OP ::= NOT 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$7 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                System.out.println("Ciclo for con condiciones: "+c );
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SEN_FOR ::= FOR PAR_IZQ COND_FOR NT$7 PAR_DER LLAV_IZQ SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_FOR",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // COND_FOR ::= VAR_FOR PTCOMA CONDICION1 PTCOMA AUMENTO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +"; "+b+";"+c;
                 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_FOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // COND_FOR ::= VAR_FOR PTCOMA CONDICION1 PTCOMA VARIABLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +"; "+b+";"+c;
                 
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_FOR",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VAR_FOR ::= VARIABLE_FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VAR_FOR ::= VAR_FOR2 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_FOR",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VAR_FOR2 ::= VAR1 IGUAL OP_FOR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +"="+c ;
                String aux= a.toString(); /// se envia como variable repetido
                datos.variables_clase(nombre,aux);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VAR_FOR2",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OP_FOR ::= OP_FOR ARITMETICO ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +""+b+""+c ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OP_FOR ::= OP_FOR ARITMETICO ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +""+b+""+c ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OP_FOR ::= OP_FOR ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +""+b ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OP_FOR ::= OP_FOR ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +""+b ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // OP_FOR ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // OP_FOR ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // OP_FOR ::= ARITMETICO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OP_FOR",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLE_FOR ::= TIPO_VAR ID IGUAL OP_FOR 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tipo = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object value = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT =  tipo +""+id+"="+value;
                String aux= id.toString(); /// se envia como variable repetido
                datos.variables_clase(nombre,aux);

        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VARIABLE_FOR",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // AUMENTO ::= AUMENTO ARITMETICO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=a+""+b;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // AUMENTO ::= AUMENTO ARITMETICO ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=a+""+b+""+c;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // AUMENTO ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // AUMENTO ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // AUMENTO ::= ARITMETICO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AUMENTO",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // NT$8 ::= 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 System.out.println("sentencia do while : "+c ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SEN_DO ::= DO LLAV_IZQ SENTENCIAS LLAV_DER WHILE PAR_IZQ COND_WHILE NT$8 PAR_DER PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_DO",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // NT$9 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 
              System.out.println("sentencia while : "+a ); 
              RESULT = a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SEN_WHILE ::= WHILE PAR_IZQ COND_WHILE NT$9 PAR_DER LLAV_IZQ SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_WHILE",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COND_WHILE ::= CONDICION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    RESULT=a;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_WHILE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // COND_WHILE ::= NOT PAR_IZQ CONDICION PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                    RESULT= "!(" +a+")";
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("COND_WHILE",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // NT$10 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

                System.out.println("switch case parametro : "+id );     
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$11 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

                System.out.println("casos : "+a );     
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SEN_SWITCH ::= SWITCH PAR_IZQ ID PAR_DER LLAV_IZQ NT$10 SEN_CASE NT$11 DEFAULT SENTENCIAS LLAV_DER 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_SWITCH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SEN_SWITCH ::= error DEFAULT 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_SWITCH",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$12 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = exp;
                System.out.println("casos : "+exp );     
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SEN_CASE ::= SEN_CASE CASE EXP_CASE DOSPT NT$12 SENTENCIAS BREAK PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_CASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // NT$13 ::= 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
RESULT = exp;
                System.out.println("casos : "+exp );     
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SEN_CASE ::= CASE EXP_CASE DOSPT NT$13 SENTENCIAS BREAK PTCOMA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_CASE",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP_CASE ::= CADENA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CASE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP_CASE ::= CADENA_SIMP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CASE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP_CASE ::= ENTERO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = a;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXP_CASE",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // LLAM_MET ::= ID PAR_IZQ PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                System.out.println("nombre del parametro : "+ a +" Con Parametros:"+ tmp );     
             
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAM_MET",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // LLAM_MET ::= ID PAR_IZQ PAR PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                System.out.println("nombre del parametro : "+ a +" Con Parametros:"+ b );     
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAM_MET",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // LLAM_MET ::= error PAR_DER PTCOMA 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LLAM_MET",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // IMPORTS ::= TIPO_VAR ID IGUAL REQUIRE PAR_IZQ CADENA PAR_DER 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                System.out.println("Importar : "+ a +" "+ b +"path:"+c );     
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPORTS",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ARITMETICO ::= MAS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ARITMETICO ::= MENOS 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ARITMETICO ::= POR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ARITMETICO ::= DIVISION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ARITMETICO ::= POTENCIA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ARITMETICO ::= MODULO 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ARITMETICO",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SEN_CONSOLA ::= CONSOLA PAR_IZQ IMPRIMIR PAR_DER PTCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
               System.out.println( "IMPRIMIR: "+a);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SEN_CONSOLA",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // IMPRIMIR ::= IMPRIMIR ARITMETICO P_AUX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a +""+b ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IMPRIMIR ::= P_AUX 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = a ;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
